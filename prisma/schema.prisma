generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

 enum Role {
  UNIVERSITY
  STUDENT
  ECOLE
  MINISTERE
}
 enum RoleEcole {
  PRIVEE
  PROFESSIONNEL
  FORMATION
}

enum NotificationType {
  DIPLOME_VALIDE
  DIPLOME_REJETE
  NOUVELLE_DEMANDE
  COMPTE_VERIFIE
  ALERT_GENERAL
}


model Notification {
  id           Int       @id @default(autoincrement())
  title        String
  message      String
  isRead       Boolean   @default(false)
  type         NotificationType
  createdAt    DateTime  @default(now())

  // À qui est destinée la notification
  receiver     Account   @relation("Notification_receiver", fields: [receiverId], references: [id])
  receiverId   Int

  // Facultatif : qui a envoyé la notif
  sender       Account?  @relation("NotificationSender", fields: [senderId], references: [id])
  senderId     Int?
}

model Account {
  id           Int       @id @default(autoincrement())
  username     String
  email        String    @unique
  password     String
  role         Role
  isVerified   Boolean   @default(false)
   verificationToken String?   @unique
  createdAt    DateTime  @default(now())
  university   University?           @relation("UniversityToAccount")
  ecole      Ecole?  @relation("EcoleToAccount")
  etudiant Etudiant_account? @relation("Etudiant_accountToAccount")
  ministere       Ministere?          @relation("MinistereToAccount") 

  notificationsReceived Notification[] @relation("Notification_receiver")
  notificationsSent     Notification[] @relation("NotificationSender")
}

model University {
  idUni           Int          @id @default(autoincrement())
  nomUni          String
  adresseUni      String
  telephoneUni    String
  emailUni        String       @unique
 walletAddress     String?   @unique
walletPrivateKey  String?
walletIV String @default("initial_iv_value")  // Remplacez par une valeur appropriée
 account         Account      @relation("UniversityToAccount", fields: [accountId], references: [id])
  accountId       Int          @unique
  faculties       Faculty[]
  departments     Department[]
}


model University_OFFICIAL {
  idUni        Int       @id @default(autoincrement())
  nomUni       String
  adresseUni   String
  telephoneUni String
  emailUni     String    @unique

}

model Ecole {
  idEcole        Int       @id @default(autoincrement())
  nomEcole      String
  telephoneEcole String
  emailEcole     String    @unique
  account      Account   @relation("EcoleToAccount", fields: [accountId], references: [id])
  accountId    Int       @unique
  role          RoleEcole
}


model Ecole_OFFICIAL {
  idEcole        Int       @id @default(autoincrement())
  nomEcole      String
  telephoneEcole String
  emailEcole     String    @unique
  role          RoleEcole
}

model Etudiant_account {
    idEtudiant                  Int                   @id @default(autoincrement())
    nom                 String
    prenom              String
    email               String                @unique
    telephone           String                @unique
    account      Account   @relation("Etudiant_accountToAccount", fields: [accountId], references: [id])
  accountId    Int       @unique
}

model Faculty {
    idFaculty                  Int                   @id @default(autoincrement())
    nomFaculty                 String
    idUni    Int
    university       University         @relation(fields: [idUni], references: [idUni], onDelete: Cascade)
    cursusUniversitaire CursusUniversitaire[]
    departments         Department[]
}

model Department {
    idDepart                 Int                   @id @default(autoincrement())
    nomDepart                 String
    idFaculty          Int
    faculty             Faculty               @relation(fields: [idFaculty], references: [idFaculty], onDelete: Cascade)
    university  University @relation(fields: [idUni], references: [idUni], onDelete: Cascade) // Relation inverse ajoutée
    idUni      Int
    cursusUniversitaire CursusUniversitaire[]
}

model Etudiant {
    idEtudiant                  Int                   @id @default(autoincrement())
    nom                 String
    prenom              String
    email               String                @unique
    matricule           String                @unique
    telephone           String                @unique
    dateNaissance      DateTime
    lieuNaissance      String
    CursusUniversitaire CursusUniversitaire[] 
    diplomes            Diplome[] 
}

model EtudiantMinistere {
  idEtudiantMinistere Int      @id @default(autoincrement())
  nom                 String
  prenom              String
  email               String   @unique
  matricule           String   @unique
  dateNaissance       DateTime
  lieuNaissance       String

  // Lien vers le ministère de référence
  ministere           Ministere?  @relation(fields: [ministereId], references: [id])  // rendre nullable
  ministereId         Int?
}



model Ministere {
  id             Int        @id @default(autoincrement())
  nomMinistere   String
  emailMinistere String     @unique
  pays           String?

  // Lien vers le compte utilisateur
  account        Account    @relation("MinistereToAccount", fields: [accountId], references: [id])
  accountId      Int        @unique

  etudiants      EtudiantMinistere[]
}


model Diplome {
  id             Int       @id @default(autoincrement())
  diplomaHash    String    @unique
  etablissement String
  studentName   String
  birthDate     DateTime
  diplomaTitle  String
  diplomaType   DiplomaType 
  dateOfIssue   DateTime
  speciality    String
  complete      Boolean

  // Relation vers l'étudiant
  etudiantId    Int
  etudiant      Etudiant   @relation(fields: [etudiantId], references: [idEtudiant])

  @@index([etudiantId])
}

enum DiplomaType {
  Universite
  EcolePrivee
  EcoleProfessionnelle
}


model CursusUniversitaire {
    id               Int                @id @default(autoincrement())
    section          String
    groupe           String
    filiere          String
    idFaculty       Int?
    faculty          Faculty?           @relation(fields: [idFaculty], references: [idFaculty], onDelete: Cascade)
    idDepart   Int?
    department      Department?       @relation(fields: [idDepart], references: [idDepart], onDelete: Cascade)
    specialite       String?
    moyenneAnnuelle Float?          
    idAnnee         Int
    annee            AnneeUniversitaire @relation(fields: [idAnnee], references: [idAnnee], onDelete: Cascade)
    niveau           Int
    etudiant   Etudiant @relation(fields: [idEtudiant], references: [idEtudiant])
    idEtudiant Int

}

model AnneeUniversitaire {
    idAnnee                  Int                   @id @default(autoincrement())
    annee               String
    anneediplome        Int
    isCurrent           Boolean
    cursusUniversitaire CursusUniversitaire[]
}

model HistoriqueVerification {
  id               Int      @id @default(autoincrement())
  idEtudiant       Int
  nomEtudiant      String
  lienVerification String
  titreDiplome     String
  etablissement    String
  dateDemande      DateTime @default(now())
  dateDernierAcces DateTime @default(now())
  
  @@index([idEtudiant])
}